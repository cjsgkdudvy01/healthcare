<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">	
	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http auto-config="true">	<!-- use-expressions="true"  true가 default  -->
		<intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/myPage" access="hasRole('ROLE_USER')"/>	<!-- hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN')도 가능 -->
		<intercept-url pattern="/login" access="hasRole('ROLE_ANONYMOUS')"/>
		<intercept-url pattern="/**" access="permitAll"/>

		<form-login
			username-parameter="loginInputId"
			password-parameter="loginInputPassword"
			login-page="/login"
		    login-processing-url="/loginProcess"
			default-target-url="/myPage"
			authentication-success-handler-ref="CustomAuthenticationSuccessHandler"
			authentication-failure-handler-ref="customAuthenticationFailureHandler"
		/>
		<logout
			logout-url="/logoutProcess"
			logout-success-url="/login"
			delete-cookies="JSESSIONID"
		/>
		
		<access-denied-handler ref="accessDenied"/>
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor"/>	<!-- 커스텀 필터 등록 -->  
	</http>
	<!-- db연결 -->
	<beans:bean id="CustomJdbcDaoImpl" class="#{projectIni['homePath']}.springSecurity.dao.CustomJdbcDaoImpl">
		<beans:constructor-arg ref="sqlSessionTemplate"/>
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="rolePrefix" value=""/>
		<beans:property name="enableGroups" value="false"/>
	</beans:bean>
	
	<!-- 로그인 성공  후 -->
	<beans:bean id="CustomAuthenticationSuccessHandler" class="#{projectIni['homePath']}.springSecurity.controller.CustomAuthenticationSuccessHandler">
		<beans:constructor-arg index="0" value="loginRedirect"/>			<!-- targetUrlParameter  -->
		<beans:constructor-arg index="1" value="/myPage"/>					<!-- defaultUrl -->	
		<beans:constructor-arg index="2">					<!-- useReferer -->
			<beans:value type="boolean">false</beans:value>
		</beans:constructor-arg>		
	</beans:bean>
	
	<!-- 인증실패 constructor 방식으로 교체 -->
	<beans:bean id="customAuthenticationFailureHandler" class="#{projectIni['homePath']}.springSecurity.controller.CustomAuthenticationFailureHandler">
		<beans:constructor-arg index="0" value="loginInputId"/>				<!-- loginidname  -->	
		<beans:constructor-arg index="1" value="loginInputPassword"/>				<!-- loginpasswdname -->
		<beans:constructor-arg index="2" value="loginRedirect"/>		<!-- loginredirectname -->
		<beans:constructor-arg index="3" value="securityexceptionmsg"/>	<!-- exceptionmsgname -->
		<beans:constructor-arg index="4" value="/login?fail=true"/>		<!-- defaultFailureUrl -->
	</beans:bean>
	
	<!-- 인증 검사 디비연경 -->
	<authentication-manager>
			<authentication-provider user-service-ref="CustomJdbcDaoImpl">
				<password-encoder ref ="bcryptPsswordEncoder"/>				<!-- 비밀번호 인코딩 -->             
			</authentication-provider>
	</authentication-manager>
	
	<!-- 오류메세지 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>classpath:properties/spring_security_message</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="defaultEncoding" value="UTF-8"/>
		<beans:property name="cacheSeconds" value="5"/>
	</beans:bean>
	
	<!-- bcrypt 암호화 파싱 -->
	<beans:bean id="bcryptPsswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- 자원 접근 판독단, voter 설정  (AffirmativeBased: 하나라도 일치)-->
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">	
	<beans:constructor-arg>
		<beans:list>
			<beans:bean class="org.springframework.security.access.vote.RoleVoter">
				<beans:property name="rolePrefix" value="" />
			</beans:bean>
			<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
		</beans:list>
	</beans:constructor-arg>
	<beans:property name="allowIfAllAbstainDecisions" value="false" />
</beans:bean>

<!-- db권한검사하는 필터 -->
<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
	<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
	<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
	<beans:property name="securityMetadataSource" ref="reloadableFilterInvocationSecurityMetadataSource" />
</beans:bean>

<beans:bean id="reloadableFilterInvocationSecurityMetadataSource" class="hong.yeongpyo.healthCare.springSecurity.ReloadableFilterInvocationSecurityMetadataSource">
	<beans:constructor-arg ref="requestMap" />
	<beans:property name="securedObjService" ref="securedObjService" />
</beans:bean>

<beans:bean id="securedObjService" class="hong.yeongpyo.healthCare.springSecurity.serviceImpl.SecuredObjServiceImpl">
	<beans:constructor-arg ref="securedObjDao"/>
</beans:bean>

<beans:bean id="securedObjDao" class="hong.yeongpyo.healthCare.springSecurity.dao.SecuredObjDao">
	<beans:constructor-arg ref="sqlSessionTemplate"/>
	
</beans:bean>

<beans:bean id="requestMap" class="hong.yeongpyo.healthCare.springSecurity.UrlResourcesMapFactoryBean" init-method="init">
	<beans:property name="securedObjService" ref="securedObjService" />
</beans:bean>

<beans:bean id="accessDenied" class="hong.yeongpyo.healthCare.springSecurity.controller.CustomAccessDeniedHandler">
	<beans:constructor-arg value="/common/accessDenied"/>	<!-- errorPage -->
</beans:bean>
</beans:beans>
